// lib/export-templates.ts
// Export templates for different frameworks

import type { PageNode } from '@/types/section-system';

export interface ExportOptions {
  includeSource?: boolean;
  includeTypes?: boolean;
  format: 'static' | 'nextjs' | 'remix';
}

export function generateStaticHTML(html: string, css: string, title: string): string {
  return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${title}</title>
    <style>
${css}
    </style>
    <script>
        // Minimal interactions
        document.addEventListener('DOMContentLoaded', function() {
            // Smooth scrolling for anchor links
            document.querySelectorAll('a[href^="#"]').forEach(anchor => {
                anchor.addEventListener('click', function (e) {
                    e.preventDefault();
                    const target = document.querySelector(this.getAttribute('href'));
                    if (target) {
                        target.scrollIntoView({ behavior: 'smooth' });
                    }
                });
            });
            
            // Basic form validation
            document.querySelectorAll('form').forEach(form => {
                form.addEventListener('submit', function(e) {
                    const requiredFields = form.querySelectorAll('[required]');
                    let isValid = true;
                    
                    requiredFields.forEach(field => {
                        if (!field.value.trim()) {
                            isValid = false;
                            field.classList.add('border-red-500');
                        } else {
                            field.classList.remove('border-red-500');
                        }
                    });
                    
                    if (!isValid) {
                        e.preventDefault();
                        alert('Please fill in all required fields.');
                    }
                });
            });
        });
    </script>
</head>
<body>
${html}
</body>
</html>`;
}

export function generateStaticREADME(): string {
  return `# Static Website Export

This is a static website generated by Grid 2.0.

## Files

- \`index.html\` - Main HTML file with embedded styles
- \`README.md\` - This file

## Deployment

### Option 1: Upload to any web hosting
Simply upload all files to your web hosting provider.

### Option 2: Deploy to Netlify
1. Drag and drop this folder to [netlify.com/drop](https://netlify.com/drop)
2. Your site will be live instantly

### Option 3: Deploy to Vercel
1. Install Vercel CLI: \`npm i -g vercel\`
2. Run \`vercel\` in this folder
3. Follow the prompts

### Option 4: GitHub Pages
1. Create a new GitHub repository
2. Upload these files
3. Enable GitHub Pages in repository settings

## Customization

The CSS uses CSS custom properties (variables) for easy theming:

- \`--brand-500\` - Primary brand color
- \`--gray-900\` - Dark text color
- \`--font-heading\` - Heading font
- \`--font-body\` - Body font

Edit the \`:root\` section in the \`<style>\` tag to customize colors and fonts.

## Performance

- ✅ No external dependencies
- ✅ Minified CSS
- ✅ Semantic HTML
- ✅ Mobile responsive
- ✅ Fast loading

Built with ❤️ by Grid 2.0`;
}

export function generateNextJSPackageJSON(projectName: string): string {
  return JSON.stringify({
    name: projectName.toLowerCase().replace(/\s+/g, '-'),
    version: "0.1.0",
    private: true,
    scripts: {
      dev: "next dev",
      build: "next build",
      start: "next start",
      lint: "next lint"
    },
    dependencies: {
      next: "14.0.0",
      react: "^18",
      "react-dom": "^18"
    },
    devDependencies: {
      "@types/node": "^20",
      "@types/react": "^18",
      "@types/react-dom": "^18",
      autoprefixer: "^10.0.1",
      eslint: "^8",
      "eslint-config-next": "14.0.0",
      postcss: "^8",
      tailwindcss: "^3.3.0",
      typescript: "^5"
    },
    engines: {
      node: ">=18"
    }
  }, null, 2);
}

export function generateTailwindConfig(): string {
  return `/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        brand: {
          50: 'var(--brand-50)',
          100: 'var(--brand-100)',
          200: 'var(--brand-200)',
          300: 'var(--brand-300)',
          400: 'var(--brand-400)',
          500: 'var(--brand-500)',
          600: 'var(--brand-600)',
          700: 'var(--brand-700)',
          800: 'var(--brand-800)',
          900: 'var(--brand-900)',
        }
      },
      fontFamily: {
        heading: ['var(--font-heading)', 'ui-sans-serif', 'system-ui'],
        body: ['var(--font-body)', 'ui-sans-serif', 'system-ui'],
      },
      borderRadius: {
        'brand-sm': 'var(--radius-sm)',
        'brand-md': 'var(--radius-md)',
        'brand-lg': 'var(--radius-lg)',
        'brand-xl': 'var(--radius-xl)',
      },
      boxShadow: {
        'brand-sm': 'var(--shadow-sm)',
        'brand-md': 'var(--shadow-md)',
        'brand-lg': 'var(--shadow-lg)',
        'brand-xl': 'var(--shadow-xl)',
      }
    },
  },
  plugins: [],
}`;
}

export function generateNextJSLayout(page: PageNode): string {
  return `import './globals.css'
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  title: '${page.meta.title}',
  description: '${page.meta.description}',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  )
}`;
}

export function generateNextJSPage(page: PageNode, includeSource: boolean): string {
  const sectionImports = page.sections
    .map(section => {
      const componentName = `${section.meta.kind.charAt(0).toUpperCase()}${section.meta.kind.slice(1)}${
        section.meta.variant.split('-').map(word => 
          word.charAt(0).toUpperCase() + word.slice(1)
        ).join('')
      }`;
      return includeSource ? 
        `import ${componentName} from './components/${componentName}'` :
        `import ${componentName} from '@/components/sections/${componentName}'`;
    })
    .join('\n');

  const sectionComponents = page.sections
    .map(section => {
      const componentName = `${section.meta.kind.charAt(0).toUpperCase()}${section.meta.kind.slice(1)}${
        section.meta.variant.split('-').map(word => 
          word.charAt(0).toUpperCase() + word.slice(1)
        ).join('')
      }`;
      const propsString = JSON.stringify(section.props, null, 6).replace(/"/g, '').replace(/\n/g, '\n      ');
      return `      <${componentName} {...${propsString}} />`;
    })
    .join('\n');

  return `${sectionImports}

export default function Home() {
  return (
    <main>
${sectionComponents}
    </main>
  )
}`;
}

export function generateGlobalsCSS(css: string): string {
  return `@tailwind base;
@tailwind components;
@tailwind utilities;

${css}`;
}

export function generateNextJSREADME(projectName: string): string {
  return `# ${projectName}

A Next.js website generated by Grid 2.0.

## Getting Started

First, install dependencies:

\`\`\`bash
npm install
# or
yarn install
# or
pnpm install
\`\`\`

Then, run the development server:

\`\`\`bash
npm run dev
# or
yarn dev
# or
pnpm dev
\`\`\`

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

## Customization

### Brand Colors
Edit the CSS custom properties in \`app/globals.css\`:

\`\`\`css
:root {
  --brand-500: #3b82f6; /* Change to your brand color */
  --brand-600: #2563eb;
  /* ... */
}
\`\`\`

### Components
${projectName.includes('source') ? 
`Components are included in the \`app/components/\` directory. You can edit them directly.` :
`Components reference the original Grid 2.0 sections. Install Grid 2.0 as a dependency to customize them.`}

### Fonts
Update fonts in \`app/layout.tsx\` and the Tailwind config.

## Deployment

### Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new).

1. Push this project to GitHub
2. Import your repository on Vercel
3. Vercel will automatically detect Next.js and deploy

### Other Options

- **Netlify**: Connect your GitHub repository
- **Railway**: \`railway login && railway deploy\`
- **DigitalOcean App Platform**: Connect GitHub repository

## Learn More

- [Next.js Documentation](https://nextjs.org/docs)
- [Tailwind CSS](https://tailwindcss.com/docs)
- [Grid 2.0](https://github.com/your-org/grid2)

Built with ❤️ by Grid 2.0`;
}

export function generateRemixREADME(): string {
  return `# Remix Export (Coming Soon)

Grid 2.0 will support Remix exports in a future release.

## What's Coming

- Full-stack Remix application
- Server-side rendering
- Progressive enhancement
- Nested routing
- Built-in form handling

## Alternative

For now, you can:

1. Export as Next.js and migrate manually
2. Export as static HTML for immediate deployment
3. Wait for the Remix exporter (tracking issue: #remix-export)

Built with ❤️ by Grid 2.0`;
}